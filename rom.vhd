-- Quartus Prime VHDL tmplate
-- Single-Port ROM

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rom is

	generic 
	(
		DATA_WIDTH : natural := 21;
		ADDR_WIDTH : natural := 8
	);

	port 
	(
		addr	: in std_logic_vector (ADDR_WIDTH - 1 downto 0);
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end entity;

architecture rtl of rom is

	-- Build a 2-D array type for the ROM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	function init_rom
		return memory_t is 
		variable tmp : memory_t := (others => (others => '0'));
		
		begin
        -- Inicializa os endere√ßos:
	tmp(0) := b"000000000010100000000";
	tmp(1) := b"000000000010000000000";
	tmp(2) := b"000000000001100000000";
	tmp(3) := b"000000000001000000000";
	tmp(4) := b"000000000000100000000";
	tmp(5) := b"000000000000000000000";
	tmp(6) := b"110000010100000000101";
	tmp(7) := b"110000010000000000100";
	tmp(8) := b"110000001100000000011";
	tmp(9) := b"110000001000000000010";
	tmp(10) := b"110000000100000000001";
	tmp(11) := b"110000000000000000000";
	tmp(12) := b"000000000011100000000";
	tmp(13) := b"110000011100000010000";
	tmp(14) := b"000100000000000000001";
	tmp(15) := b"110000000000000000000";
	tmp(16) := b"001000000000000001010";
	tmp(17) := b"001100000000000011111";
	tmp(18) := b"001000000100000000110";
	tmp(19) := b"001100000000000100011";
	tmp(20) := b"001000001000000001010";
	tmp(21) := b"001100000000000100111";
	tmp(22) := b"001000001100000000110";
	tmp(23) := b"001100000000000101011";
	tmp(24) := b"001000010000000001010";
	tmp(25) := b"001100000000000101111";
	tmp(26) := b"011000010011000000100";
	tmp(27) := b"011000010111100000010";
	tmp(28) := b"111011011100000000000";
	tmp(29) := b"001100000000000000000";
	tmp(30) := b"010000000000000110011";
	tmp(31) := b"000000000000000000000";
	tmp(32) := b"000100000100000000001";
	tmp(33) := b"110000000100000000001";
	tmp(34) := b"010000000000000010010";
	tmp(35) := b"000000000000100000000";
	tmp(36) := b"000100001000000000001";
	tmp(37) := b"110000001000000000010";
	tmp(38) := b"010000000000000010100";
	tmp(39) := b"000000000001000000000";
	tmp(40) := b"000100001100000000001";
	tmp(41) := b"110000001100000000011";
	tmp(42) := b"010000000000000010110";
	tmp(43) := b"000000000001100000000";
	tmp(44) := b"000100010000000000001";
	tmp(45) := b"110000010000000000100";
	tmp(46) := b"010000000000000011000";
	tmp(47) := b"000000000010000000000";
	tmp(48) := b"000100010100000000001";
	tmp(49) := b"110000010100000000101";
	tmp(50) := b"010000000000000010010";
	tmp(51) := b"010100000011000000110";
	tmp(52) := b"001000011000000000100";
	tmp(53) := b"001100000000000001110";
	tmp(54) := b"010100000011000000111";
	tmp(55) := b"001000011000000001000";
	tmp(56) := b"001100000000000100100";
	tmp(57) := b"010100000011000001000";
	tmp(58) := b"001000011000000010000";
	tmp(59) := b"001100000000000101100";
	tmp(60) := b"010100000011000001001";
	tmp(61) := b"001000011000000000010";
	tmp(62) := b"001100000000000000000";
	tmp(63) := b"010100000011000000110";
	tmp(64) := b"001000011000000000001";
	tmp(65) := b"001100000000000001110";
	tmp(66) := b"010000000000000110011";

        return tmp;
	end init_rom;	 

	-- Declare the ROM signal and specify a default value.	Quartus Prime
	-- will create a memory initialization file (.mif) based on the 
	-- default value.
	signal rom : memory_t := init_rom;

begin
		q <= rom(to_integer(unsigned(addr)));
end rtl;
